collection Account {
  name: String
  balance: Number

  discord_id: String

  check balance_positive (.balance >= 0)
}

collection Voucher {
  amount: Number
}

role account {
  privileges pay { call }
  privileges create_voucher { call }
  privileges redeem_voucher { call }
}

function pay(to: Account, amount: Number): Null {
  let identity: Any = Query.identity()
  if (identity == null) abort ({ code: "unauthorized", message: "Unauthorized" })

  pay_admin(identity, to, amount)
}
function create_voucher(amount: Number): Null {
  let identity: Any = Query.identity()
  if (identity == null) abort ({ code: "unauthorized", message: "Unauthorized" })

  create_voucher_admin(identity, amount)
}
function redeem_voucher(voucher: Voucher): Null {
  let identity: Any = Query.identity()
  if (identity == null) abort ({ code: "unauthorized", message: "Unauthorized" })

  redeem_voucher_admin(identity, voucher)
}

function create_user(id: String, name: String): Account {
  Account.create({ name: name, balance: 0, discord_id: id })
}
function create_token(account: Account): String {
  Token.create({ document: account }).secret!
}

function pay_admin(from: Account, to: Account, amount: Number): Null {
  if (from.balance < amount) {
    abort({ code: "low_balance", message: "Not enough balance to pay #{amount}" })
  }

  from.update({ balance: from.balance - amount })
  to.update({ balance: to.balance + amount })
  null
}
function create_voucher_admin(from: Account, amount: Number): Null {
  if (from.balance < amount) {
    abort({ code: "low_balance", message: "Not enough balance to create a voucher of #{amount}" })
  }

  from.update({ balance: from.balance - amount })
  Voucher.create({ amount: amount })
  null
}
function redeem_voucher_admin(from: Account, voucher: Voucher): Null {
  from.update({ balance: from.balance + voucher.amount })
  voucher.delete()
  null
}
