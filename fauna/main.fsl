collection Account {
  name: String
  balance: Number

  discord_id: String

  check balance_positive (.balance >= 0)

  index byDiscordId {
    terms [.discord_id]
  }
  unique [.discord_id]
}

collection Voucher {
  amount: Number
}

role account {
  privileges pay { call }
  privileges create_voucher { call }
  privileges redeem_voucher { call }

  membership Account
}

@role(admin)
function pay(to: Ref<Account>, amount: Number): Null {
  let to: Ref<Account> = to // FIXME: Remove once typechecking bug is fixed.

  let identity: Any = Query.identity()
  if (identity == null) abort({ code: "unauthorized", message: "Unauthorized" })
  if (!to.exists()) abort({ code: "no_account", message: "The account doesn't exist" })

  pay_admin(identity, to!, amount)
}

@role(admin)
function create_voucher(amount: Number): Null {
  let identity: Any = Query.identity()
  if (identity == null) abort({ code: "unauthorized", message: "Unauthorized" })

  create_voucher_admin(identity, amount)
}

@role(admin)
function redeem_voucher(voucher: Ref<Voucher>): Null {
  let voucher: Ref<Voucher> = voucher // FIXME: Remove once typechecking bug is fixed.

  let identity: Any = Query.identity()
  if (identity == null) abort({ code: "unauthorized", message: "Unauthorized" })
  if (!voucher.exists()) abort({ code: "no_voucher", message: "The voucher doesn't exist" })

  redeem_voucher_admin(identity, voucher!)
}

function create_user(id: String, name: String): Account {
  Account.create({ name: name, balance: 0, discord_id: id })
}
function create_token(account: Account): String {
  Token.create({ document: account }).secret!
}

// Called from a slash command to pay a user from another user.
@role(admin)
function pay_user(from: String, to: String, amount: Number): Null {
  let from = Account.byDiscordId(from).first()
  if (from == null) {
    abort({ code: "no_account", message: "No such account with ID #{from}" })
  }

  let to = Account.byDiscordId(to).first()
  if (to == null) {
    abort({ code: "no_account", message: "No such account with ID #{to}" })
  }

  pay_admin(from!, to!, amount)
}

// Get the balance of an account. Any authorized user can read any account's balance.
@role(admin)
function balance(user: String): Number {
  let account = Account.byDiscordId(user).first()
  if (account == null) {
    abort({ code: "no_account", message: "No such account with ID #{user}" })
  }

  account!.balance
}

@role(admin)
function pay_admin(from: Account, to: Account, amount: Number): Null {
  if (amount < 0) {
    abort({ code: "invalid_balance", message: "Cannot pay a negative amount" })
  }
  if (from == to) {
    abort({ code: "same_account", message: "Cannot pay to the same account" })
  }
  if (from.balance < amount) {
    abort({ code: "low_balance", message: "Not enough balance to pay #{amount}" })
  }

  from.update({ balance: from.balance - amount })
  to.update({ balance: to.balance + amount })
  null
}

@role(admin)
function create_voucher_admin(from: Account, amount: Number): Null {
  if (amount < 0) {
    abort({ code: "invalid_balance", message: "Cannot create a voucher with a negative amount" })
  }
  if (from.balance < amount) {
    abort({ code: "low_balance", message: "Not enough balance to create a voucher of #{amount}" })
  }

  from.update({ balance: from.balance - amount })
  Voucher.create({ amount: amount })
  null
}

@role(admin)
function redeem_voucher_admin(from: Account, voucher: Voucher): Null {
  from.update({ balance: from.balance + voucher.amount })
  voucher.delete()
  null
}
