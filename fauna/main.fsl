collection Account {
  balance: Number

  discord_id: String?
  company: Ref<Company>?

  check balance_positive (.balance >= 0)
  check company_or_discord_id (.company != null || .discord_id != null)

  index byDiscordId {
    terms [.discord_id]
  }
  unique [.discord_id, .company]
}

collection Company {
  name: String
  account: Ref<Account>
  share_owners: { *: Number }

  check share_owners_positive (doc => {
    Object.values(doc.share_owners).every(x => x >= 0)
  })
  check share_owners_exist (doc => {
    Object.keys(doc.share_owners).every(x => Account(ID(x)).exists())
  })

  unique [.name]
  unique [.account]
}

collection Voucher {
  amount: Number
}

role account {
  privileges pay { call }
  privileges create_voucher { call }
  privileges redeem_voucher { call }

  membership Account
}

@role(admin)
function pay(to: Ref<Account>, amount: Number): Null {
  let to: Ref<Account> = to // FIXME: Remove once typechecking bug is fixed.

  let identity: Any = Query.identity()
  if (identity == null) abort({ code: "unauthorized", message: "Unauthorized" })
  if (!to.exists()) abort({ code: "no_account", message: "The account doesn't exist" })

  pay_admin(identity, to!, amount)
}

@role(admin)
function create_voucher(amount: Number): Null {
  let identity: Any = Query.identity()
  if (identity == null) abort({ code: "unauthorized", message: "Unauthorized" })

  create_voucher_admin(identity, amount)
}

@role(admin)
function redeem_voucher(voucher: Ref<Voucher>): Null {
  let voucher: Ref<Voucher> = voucher // FIXME: Remove once typechecking bug is fixed.

  let identity: Any = Query.identity()
  if (identity == null) abort({ code: "unauthorized", message: "Unauthorized" })
  if (!voucher.exists()) abort({ code: "no_voucher", message: "The voucher doesn't exist" })

  redeem_voucher_admin(identity, voucher!)
}

function create_user(id: String): Account {
  Account.create({ balance: 0, discord_id: id })
}
function create_company(creator: String, name: String, shares: Number): Account {
  let creator = discord_account(creator)

  let share_owners = Object.fromEntries([[creator.id.toString(), shares]])

  let account = Account(newId())

  let company = Company.create({ name: name, account: account, share_owners: share_owners })
  let account = Account.create({ id: account.id, balance: 0, company: company })

  account
}
function create_token(account: Account): String {
  Token.create({ document: account }).secret!
}

@role(admin)
function discord_account(id: String): Account {
  let account = Account.byDiscordId(id).first()
  if (account == null) {
    abort({ code: "no_account", message: "<@#{id}> has not registered yet. Tell them to run /register to get started!" })
  }

  account!
}

// Called from a slash command to pay a user from another user.
@role(admin)
function pay_user(from: String, to: String, amount: Number): Null {
  pay_admin(discord_account(from), discord_account(to), amount)
}


// Get the balance of an account. Any authorized user can read any account's balance.
@role(admin)
function balance(user: String): Number {
  discord_account(user).balance
}

function cc_str(amount: Number): String {
  let amount_str = amount.toString()

  let number_str = if (amount == Math.floor(amount)) {
    amount_str + ".00"
  } else {
    let whole = amount_str.split(".")[0]
    let fraction = amount_str.split(".")[1]

    let fraction = if (fraction.length > 2) {
      fraction.slice(0, 2)
    } else if (fraction.length == 1) {
      fraction + "0"
    } else {
      fraction
    }

    "#{whole}.#{fraction}"
  }

  "#{number_str}cc"
}

@role(admin)
function pay_admin(from: Account, to: Account, amount: Number): Null {
  if (amount < 0) {
    abort({ code: "invalid_balance", message: "Cannot pay a negative amount!" })
  }
  if (from == to) {
    abort({ code: "same_account", message: "Cannot pay to the same account!" })
  }
  if (from.balance < amount) {
    abort({ code: "low_balance", message: "Not enough balance to pay #{cc_str(amount)}." })
  }

  from.update({ balance: from.balance - amount })
  to.update({ balance: to.balance + amount })
  null
}

@role(admin)
function create_voucher_admin(from: Account, amount: Number): Null {
  if (amount < 0) {
    abort({ code: "invalid_balance", message: "Cannot create a voucher with a negative amount" })
  }
  if (from.balance < amount) {
    abort({ code: "low_balance", message: "Not enough balance to create a voucher of #{amount}" })
  }

  from.update({ balance: from.balance - amount })
  Voucher.create({ amount: amount })
  null
}

@role(admin)
function redeem_voucher_admin(from: Account, voucher: Voucher): Null {
  from.update({ balance: from.balance + voucher.amount })
  voucher.delete()
  null
}
